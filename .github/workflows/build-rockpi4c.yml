name: Build and Release ARM Images

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      device:
        description: 'Device to build for'
        required: true
        default: 'rockpi4c'
        type: choice
        options:
          - rockpi4c
          - rockpi4b
          - rpi4
          - pinebook-pro
      edition:
        description: 'Edition to build'
        required: true
        default: 'xfce'
        type: choice
        options:
          - minimal
          - xfce
          - kde-plasma
          - gnome
          - i3
      version:
        description: 'Version (leave empty for auto)'
        required: false
        type: string

env:
  DEVICE: ${{ github.event.inputs.device || 'rockpi4c' }}
  EDITION: ${{ github.event.inputs.edition || 'xfce' }}
  VERSION: ${{ github.event.inputs.version || '' }}

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        sudo apt-get autoremove -y
        sudo apt-get autoclean
        df -h
        
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qemu-user-static \
          binfmt-support \
          parted \
          dosfstools \
          wget \
          git
          
    - name: Install Manjaro ARM Tools
      run: |
        # Add Manjaro ARM repository
        sudo wget -O /etc/apt/trusted.gpg.d/manjaro-arm.gpg https://gitlab.manjaro.org/packages/core/manjaro-keyring/-/raw/master/manjaro.gpg
        echo "deb [arch=amd64] https://repo.manjaro.org/repo/stable \$arch core" | sudo tee /etc/apt/sources.list.d/manjaro-arm.list
        
        # Alternative: Install from AUR or build from source
        git clone https://gitlab.manjaro.org/manjaro-arm/applications/manjaro-arm-tools.git
        cd manjaro-arm-tools
        sudo make install
        cd ..
        
    - name: Setup build environment
      run: |
        # Create necessary directories
        sudo mkdir -p /var/cache/manjaro-arm-tools/{pkg,img}
        sudo chown -R $USER:$USER /var/cache/manjaro-arm-tools
        
        # Setup configuration
        sudo mkdir -p /usr/share/manjaro-arm-tools
        
        # Ensure profiles are available
        if [ ! -d "/usr/share/manjaro-arm-tools/profiles" ]; then
          sudo mkdir -p /usr/share/manjaro-arm-tools/profiles
          # Copy profiles from this repository if they exist
          if [ -d "profiles" ]; then
            sudo cp -r profiles/* /usr/share/manjaro-arm-tools/profiles/
          fi
        fi
        
    - name: Set version
      id: version
      run: |
        if [ -z "$VERSION" ]; then
          if [ "${{ github.event_name }}" = "push" ] && [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=$(date +%Y.%m)
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Build ARM Image
      run: |
        echo "Building image for device: $DEVICE, edition: $EDITION, version: ${{ steps.version.outputs.version }}"
        
        # Build the image
        if [ -n "${{ steps.version.outputs.version }}" ]; then
          sudo buildarmimg -d $DEVICE -e $EDITION -v ${{ steps.version.outputs.version }}
        else
          sudo buildarmimg -d $DEVICE -e $EDITION
        fi
        
    - name: Compress image
      run: |
        cd /var/cache/manjaro-arm-tools/img
        IMAGE_FILE=$(ls -t *.img | head -1)
        if [ -f "$IMAGE_FILE" ]; then
          echo "Compressing $IMAGE_FILE"
          xz -z -T 0 "$IMAGE_FILE"
          echo "compressed_image=${IMAGE_FILE}.xz" >> $GITHUB_ENV
          echo "image_path=/var/cache/manjaro-arm-tools/img/${IMAGE_FILE}.xz" >> $GITHUB_ENV
        else
          echo "No image file found!"
          ls -la
          exit 1
        fi
        
    - name: Generate checksums
      run: |
        cd /var/cache/manjaro-arm-tools/img
        sha256sum "$compressed_image" > "${compressed_image}.sha256"
        md5sum "$compressed_image" > "${compressed_image}.md5"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: arm-image-${{ env.DEVICE }}-${{ env.EDITION }}-${{ steps.version.outputs.version }}
        path: |
          ${{ env.image_path }}
          ${{ env.image_path }}.sha256
          ${{ env.image_path }}.md5
        retention-days: 30
        
    - name: Create Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ${{ env.image_path }}
          ${{ env.image_path }}.sha256
          ${{ env.image_path }}.md5
        tag_name: ${{ github.ref_name }}
        name: Release ${{ github.ref_name }}
        body: |
          ## ARM Image Release ${{ github.ref_name }}
          
          **Device:** ${{ env.DEVICE }}  
          **Edition:** ${{ env.EDITION }}  
          **Version:** ${{ steps.version.outputs.version }}
          
          ### Files
          - `${{ env.compressed_image }}` - Main image file
          - `${{ env.compressed_image }}.sha256` - SHA256 checksum
          - `${{ env.compressed_image }}.md5` - MD5 checksum
          
          ### Installation
          1. Download the `.xz` file
          2. Verify checksums
          3. Extract: `xz -d filename.img.xz`
          4. Flash to SD card/eMMC using tools like `dd`, Etcher, or similar
          
          Built on: ${{ github.run_number }} at ${{ github.event.head_commit.timestamp }}
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  matrix-build:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.device == 'all'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        device: [rockpi4c, rockpi4b, rpi4]
        edition: [minimal, xfce]
        
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo docker image prune --all --force
        df -h
        
    - name: Setup environment
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static binfmt-support parted dosfstools wget git
        
    - name: Install Manjaro ARM Tools
      run: |
        git clone https://gitlab.manjaro.org/manjaro-arm/applications/manjaro-arm-tools.git
        cd manjaro-arm-tools
        sudo make install
        cd ..
        
    - name: Setup build environment
      run: |
        sudo mkdir -p /var/cache/manjaro-arm-tools/{pkg,img}
        sudo chown -R $USER:$USER /var/cache/manjaro-arm-tools
        if [ -d "profiles" ]; then
          sudo mkdir -p /usr/share/manjaro-arm-tools/profiles
          sudo cp -r profiles/* /usr/share/manjaro-arm-tools/profiles/
        fi
        
    - name: Build ARM Image
      run: |
        echo "Building ${{ matrix.device }} with ${{ matrix.edition }}"
        sudo buildarmimg -d ${{ matrix.device }} -e ${{ matrix.edition }}
        
    - name: Compress and upload
      run: |
        cd /var/cache/manjaro-arm-tools/img
        IMAGE_FILE=$(ls -t *.img | head -1)
        if [ -f "$IMAGE_FILE" ]; then
          xz -z -T 0 "$IMAGE_FILE"
          sha256sum "${IMAGE_FILE}.xz" > "${IMAGE_FILE}.xz.sha256"
        fi
        
    - name: Upload matrix artifacts
      uses: actions/upload-artifact@v4
      with:
        name: arm-image-${{ matrix.device }}-${{ matrix.edition }}
        path: |
          /var/cache/manjaro-arm-tools/img/*.xz
          /var/cache/manjaro-arm-tools/img/*.sha256
